Data Types

Value - Primitive 
byte	1 byte	Stores whole numbers from -128 to 127
short	2 bytes	Stores whole numbers from -32,768 to 32,767
int	4 bytes	Stores whole numbers from -2,147,483,648 to 2,147,483,647
long	8 bytes	Stores whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807
float	4 bytes	Stores fractional numbers. Sufficient for storing 6 to 7 decimal digits
double	8 bytes	Stores fractional numbers. Sufficient for storing 15 decimal digits
boolean	1 bit	Stores true or false values
char	2 bytes	Stores a single character/letter or ASCII values

Reference - Derived

string
String name ="Ritesh"

array
int arr[] = {1,2,3,4,5}

object
Class_type obj = new Class_Type();


BigInteger
Bank

str = "124234827348926734892634263489273849728349723947293473472942342342342342342342556567568676786"
iterate 

% 32 == 0

Variables
	- Java language defines follwing types of variables
		:: Instance Variables(Non-Static Fields) : Objects stores their individual states in "non static fields" i.e. fields declared without "static" keyword. They are also called as instance variable because their values are unique to each instance of the class.
		:: Class variables (Static fields) : field declared with "static" modifer tells compiler that there is exactly one copy of this variable in existence, regardless of how many times the class has bein instantiated. Additionally, keyword "final" could be added to indicate that the variable won't change.
		:: Local Variables : Methods stores its temporary state in local variables. Defined within local scope {}.
 		:: Parameters : defined in method signature. 
				IMPORATANT : parameters are always classified as variables & NOT fields. This applies to other parameter accepting constructs as well. (such as constructors and exception handlers)


Classnamme obj = new classname()
obj.Name;

Classtype.Common()

	- Naming Rules
		: Variable names are cases sensitive.
		: sequence of unicode character, digits. Can begin with _ & $
		: 

Operators
	postfix			expr++ expr--
	unary			++expr --expr +expr -expr ~ !
	multiplicative		* / %
	additive		+ -
	shift			<< >> >>>
	relational		< > <= >= instanceof
	equality		== !=
	bitwise AND		&
	bitwise exclusive 	OR	^
	bitwise inclusive 	OR	|
	logical	AND		&&
	logical OR		||
	ternary	? :
	assignment		= += -= *= /= %= &= ^= |= <<= >>= >>>=

********************************************************************************************************************************************************
Questions and Exercises: Operators
Questions
Consider the following code snippet.
arrayOfInts[j] > arrayOfInts[j+1]
Which operators does the code contain?
Consider the following code snippet.
int i = 10;
int n = i++%5;
What are the values of i and n after the code is executed?
What are the final values of i and n if instead of using the postfix increment operator (i++), you use the prefix version (++i))?
To invert the value of a boolean, which operator would you use?
Which operator is used to compare two values, = or == ?
Explain the following code sample: result = someCondition ? value1 : value2;
Exercises
Change the following program to use compound assignments:
class ArithmeticDemo {

     public static void main (String[] args){
          
          int result = 1 + 2; // result is now 3
          System.out.println(result);

          result = result - 1; // result is now 2
          System.out.println(result);

          result = result * 2; // result is now 4
          System.out.println(result);

          result = result / 2; // result is now 2
          System.out.println(result);

          result = result + 8; // result is now 10
          result = result % 7; // result is now 3
          System.out.println(result);
     }
}

In the following program, explain why the value "6" is printed twice in a row:
class PrePostDemo {
    public static void main(String[] args){
        int i = 3;
        i++;
        System.out.println(i);    // "4"
        ++i;                     
        System.out.println(i);    // "5"
        System.out.println(++i);  // "6"
        System.out.println(i++);  // "6"
        System.out.println(i);    // "7"
    }
}
****************************************************************************************************************************************************
	
Expressions, Statements & Blocks

	Expression : An expression is a construct made up of variables, operators, and method invocations, which are constructed according to the syntax of the language, that evaluates to a single value.


	Statements are roughly equivalent to sentences in natural languages. A statement forms a complete unit of execution
	The following types of expressions can be made into a statement by terminating the expression with a semicolon (;).
	Assignment expressions
	Any use of ++ or --
	Method invocations
	Object creation expressions

	Blocks
		: A block is a group of zero or more statements between balanced braces and can be used anywhere a single statement is allowed.

**************************************************************************************************************************************************
Questions and Exercises: Expressions, Statements, and Blocks
Questions
Operators may be used in building ___, which compute values.
Expressions are the core components of ___.
Statements may be grouped into ___.
The following code snippet is an example of a ___ expression.
 1 * 2 * 3
Statements are roughly equivalent to sentences in natural languages, but instead of ending with a period, a statement ends with a ___.
A block is a group of zero or more statements between balanced ___ and can be used anywhere a single statement is allowed.
Exercises
Identify the following kinds of expression statements:

aValue = 8933.234;
aValue++;
System.out.println("Hello World!");
Bicycle myBike = new Bicycle();
***************************************************************************************************************************************************



Control Flow Statements


if-elseif-else
class IfElseDemo {
    public static void main(String[] args) {

        int testscore = 76;
        char grade;

        if (testscore >= 90) {
            grade = 'A';
        } 
	else if (testscore >= 80) {
            grade = 'B';
        } 
	else if (testscore >= 70) {
            grade = 'C';
        } 
	else if (testscore >= 60) {
            grade = 'D';
        } 
	else {
            grade = 'F';
        }
        System.out.println("Grade = " + grade);
    }
}

Switch
can use strings 
public class StringSwitchDemo {

    public static int getMonthNumber(String month) {

       String month = "january";

        switch (month)) {
            case "january":
                monthNumber = 1;
                break;
            case "february":
                monthNumber = 2;
                break;
            case "march":
                monthNumber = 3;
                break;
            case "april":
                monthNumber = 4;
                break;
            default: 
                monthNumber = 0;
                break;
        }

        return monthNumber;
    }

while

while(condition)
{
//Things to do..
}

Looping
	1. Initialization
	2. Code/Loop updation
	3. Condition Check




int i = 6;
while (i < 10) {
     System.out.println(i);
	i++;
}

Do-While
class DoWhileDemo {
    public static void main(String[] args){
        
	int count = 1;
        do {
            System.out.println("Count is: " + count);
            count++;
        } while (count < 11);
    }
}

Difference between while & do while
For Loop

// infinite loop
for ( ; ; ) {
    
    // your code goes here
}
class EnhancedForDemo {
    public static void main(String[] args){
         int[] numbers = 
             {1,2,3,4,5,6,7,8,9,10};
         for (int item : numbers) {
             System.out.println("Count is: " + item);
         }
    }
}


*****************************************************************************************************************************************************
Questions and Exercises: Control Flow Statements
Questions
The most basic control flow statement supported by the Java programming language is the ___ statement.
The ___ statement allows for any number of possible execution paths.
The ___ statement is similar to the while statement, but evaluates its expression at the ___ of the loop.
How do you write an infinite loop using the for statement?
How do you write an infinite loop using the while statement?

Exercises
Consider the following code snippet.

if (aNumber >= 0)
    if (aNumber == 0)
        System.out.println("first string");
else System.out.println("second string");
System.out.println("third string");
What output do you think the code will produce if aNumber is 3?
Write a test program containing the previous code snippet; make aNumber 3. What is the output of the program? Is it what you predicted? Explain why the output is what it is; in other words, what is the control flow for the code snippet?
Using only spaces and line breaks, reformat the code snippet to make the control flow easier to understand.
Use braces, { and }, to further clarify the code.
**************************************************************************************************************************************
















